% Generated by roxygen2 (4.0.2): do not edit by hand
\name{with_mock}
\alias{with_mock}
\title{Mock functions in a package.}
\usage{
with_mock(..., .env = topenv())
}
\arguments{
\item{...}{named parameters redefine mocked functions, unnamed parameters
will be evaluated after mocking the functions}

\item{.env}{the environment in which to patch the functions,
defaults to the top-level environment.  A character is interpreted as
package name.}
}
\value{
The result of the last unnamed parameter
}
\description{
Executes code after temporarily substituting implementations of package
functions.  This is useful for testing code that relies on functions that are
slow, have unintended side effects or access resources that may not be
available when testing.
}
\details{
Internally, this works by patching the function definition in the package's
namespace.  If the package is loaded, and the function to be mocked is
exported, the patching also needs to take place in the package environment.
On exit, everything is restored to the previous state.

Caveat: Currently, imported functions cannot be mocked if they are accessed
from package code without qualification.  Please use qualified access
(using the \code{::} operator) instead of adding \code{importFrom(...)} to the
\code{NAMESPACE} file.
}
\examples{
with_mock(
  all.equal = function(x, y, ...) TRUE,
  expect_equal(2 * 3, 4),
  .env = "base"
)
with_mock(
  `base::identical` = function(x, y, ...) TRUE,
  `base::all.equal` = function(x, y, ...) TRUE,
  expect_equal(x <- 3 * 3, 6),
  expect_identical(x + 4, 9)
)
throws_error()(expect_equal(3, 5))
throws_error()(expect_identical(3, 5))
}
\references{
Suraj Gupta (2012): \href{http://obeautifulcode.com/R/How-R-Searches-And-Finds-Stuff}{How R Searches And Finds Stuff}
}

